var documenterSearchIndex = {"docs":
[{"location":"manual/function_list/#Functions-and-structs","page":"Functions and structs","title":"Functions and structs","text":"","category":"section"},{"location":"manual/function_list/#From-mpccmodel_common.jl","page":"Functions and structs","title":"From mpccmodel_commonjl","text":"","category":"section"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"Common structs, etc.","category":"page"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCDimSpec","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCDimSpec","page":"Functions and structs","title":"MPCCModelManager.MPCCDimSpec","text":"MPCCDimSpec\n\nDetermines the dimensions of a program.\n\nn: number of spatial dimensions\nq: columns in F (number of complementarity contraints)\nl: row in F (number of expressions in each complementarity contraint)\nme: numeber of equality constraints\nme: numeber of inequality constraints\nr: number of continuous parameters\ns: number of integer parameters\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCDefinition","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCDefinition","page":"Functions and structs","title":"MPCCModelManager.MPCCDefinition","text":"MPCCDefinition\n\nDefinition of the MPCC/NLP containing Symbolics Num expressions for f, ce, ci, and F.\n\nf: objective function\nce: vector of equality constraints ( == 0 )\nci: vector of inequality constraints ( >= 0 )\nF: matrix l-by-q of complementarity constraints ( >= 0 )\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCFunctions","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCFunctions","page":"Functions and structs","title":"MPCCModelManager.MPCCFunctions","text":"MPCCFunctions\n\nA MPCCDefinition compiled into functions. This contains both standard and mutating functions, and individual elements encoded as a function within a vector or matrix.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCParameterisationDefn","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCParameterisationDefn","page":"Functions and structs","title":"MPCCModelManager.MPCCParameterisationDefn","text":"MPCCParameterisationDefn\n\nThe definition for a parameterisation of a model, i.e. how the pr depends on t.\n\npr: vector of Num expressions\ntspan: closed t interval\ndescr: description\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCParameterisationFunctions","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCParameterisationFunctions","page":"Functions and structs","title":"MPCCModelManager.MPCCParameterisationFunctions","text":"MPCCParameterisationFunctions\n\nCompilation of MPCCParameterisationFunctions into Julia functions, including derivative.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCParameterisations","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCParameterisations","page":"Functions and structs","title":"MPCCModelManager.MPCCParameterisations","text":"MPCCParameterisations\n\nCollection of Num t along with definitions of parameterisations and their compilation.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCModelConfig","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCModelConfig","page":"Functions and structs","title":"MPCCModelManager.MPCCModelConfig","text":"MPCCModelConfig\n\nModel config contains the Num variables for x, pr, ps along with the MPCCDimSpec, definition, compiled definition, any test vectors, any known solutions, and parameterisations. Basically everything that specifies a model.\n\nNote re parameterisations: if using a static model with r=0, then this should be   set to missing\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCModelDenseForwardDiff","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCModelDenseForwardDiff","page":"Functions and structs","title":"MPCCModelManager.MPCCModelDenseForwardDiff","text":"MPCCModelDenseForwardDiff\n\nA MPCCModelConfig compiled to produce the derivatives we want. This version uses ForwardDiff.jl and produces dense matrices.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCActivesetCnstrType","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCActivesetCnstrType","page":"Functions and structs","title":"MPCCModelManager.MPCCActivesetCnstrType","text":"MPCCActivesetCnstrType\n\nEnumeration of the different possible constraint types: equality, inequality, and each individual constraint in a complementarity.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.MPCCConstraintSet","category":"page"},{"location":"manual/function_list/#MPCCModelManager.MPCCConstraintSet","page":"Functions and structs","title":"MPCCModelManager.MPCCConstraintSet","text":"MPCCConstraintSet\n\nA constraint set, e.g. for storing a working or active set. It works by collecting a vector of base indices. By a standard definition, each constraint in a problem has a unique base index.\n\nSo we (only) need to store the problem dimension and the vector of BIs. There are functions that encode the logic to do the opposite conversion. In practice, we actually save the model config because for display purposes, it allows us to list the actual constraint expressions.\n\n\n\n\n\n","category":"type"},{"location":"manual/function_list/#From-mpccmodel_proc_model.jl","page":"Functions and structs","title":"From mpccmodel_proc_modeljl","text":"","category":"section"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"These functions are used to process a model definition with end point producing the model config struct which includes closures to construct f, ce, ci, F functions, parametrisations, etc.","category":"page"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.mpccmodel_build_sym_nums","category":"page"},{"location":"manual/function_list/#MPCCModelManager.mpccmodel_build_sym_nums","page":"Functions and structs","title":"MPCCModelManager.mpccmodel_build_sym_nums","text":"mpccmodel_build_sym_nums(dimspec::MPCCDimSpec)\n\nReturns Symbolics.jl Num variable that correspond to the provided dimspec. See MPCCDimSpec definition for what each field means.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.mpccmodel_build_fn_from_defn","category":"page"},{"location":"manual/function_list/#MPCCModelManager.mpccmodel_build_fn_from_defn","page":"Functions and structs","title":"MPCCModelManager.mpccmodel_build_fn_from_defn","text":"mpccmodel_build_fn_from_defn(dimspec, defn, x, pr, ps)\n\nAssemble f, ce, ci, and F Julia native functions from Symbolic definition and returns both non-indexed and indexed variants. Generally no need to call directly as this is called from mpccmodel_load_defn_from_file().\n\nNOTE: To understand how this works, one should also play with a few examples ofbuild_function() in Symbolics.jl.  The output from build_function() is a 2-element vector whereby the first element is the standard function and the second is a mutating version of the same function. Hence the formulation in the code here.\n\nArguments\n\ndimspec::MPCCDimSpec: The dimension specifications for the proram.\ndefn::MPCCDefinition: The Symbolics.jl Num definitions of the expressions.\nx, pr, ps: Symbolics.jl Num variables for x, pr, ps.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.mpccmodel_build_parameterisation","category":"page"},{"location":"manual/function_list/#MPCCModelManager.mpccmodel_build_parameterisation","page":"Functions and structs","title":"MPCCModelManager.mpccmodel_build_parameterisation","text":"mpccmodel_build_parameterisation(defns, t)\n\nBuild parameterisation from defns and Symbolics Num t, returns struct with Julia native functions including derivatives.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.mpccmodel_construct_config","category":"page"},{"location":"manual/function_list/#From-mpccmodel_calc_forwarddiff_dense.jl","page":"Functions and structs","title":"From mpccmodel_calc_forwarddiff_densejl","text":"","category":"section"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"This construsts the full gamut of functions as closures using ForwardDiff.jl.","category":"page"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.mpccmodel_setup_forwarddiff_dense","category":"page"},{"location":"manual/function_list/#MPCCModelManager.mpccmodel_setup_forwarddiff_dense","page":"Functions and structs","title":"MPCCModelManager.mpccmodel_setup_forwarddiff_dense","text":"mpccmodel_setup_forwarddiff_dense(config::MPCCModelConfig)\n\nAccepts model config and returns a struct with all the nice Julia functions to calculate Jacobians, Hessians, and parametric derivatives using ForwardDiff.jl.\n\nBoth standard and mutating functions are constructed. Most of the functions accept an index as the last argument to specify a subset of the constraints. For F constraints, this should be a vector of either tuple pairs or CartesianIndexes.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/#From-mpccmodel_constraint_sets.jl","page":"Functions and structs","title":"From mpccmodel_constraint_setsjl","text":"","category":"section"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"This code is used when storing the active set description. It allow manipulation of an active set description in a storage efficient manner.","category":"page"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cpair_to_bi","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cpair_to_bi","page":"Functions and structs","title":"MPCCModelManager.cs_cpair_to_bi","text":"cs_cpair_to_bi(dimspec::MPCCDimSpec, ctype::MPCCActivesetCnstrType, el::MPCCIdxElement)\n\nConvert from a 'cpair' of constraint type (CE, CI, F) and element index, to a base index in the defined ordering. Only depends on the problem dimensions, not an actual constraint set.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_bi_to_cpair","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_bi_to_cpair","page":"Functions and structs","title":"MPCCModelManager.cs_bi_to_cpair","text":"cs_bi_to_cpair(dimspec::MPCCDimSpec, el::Int64; b_F_cart=true)\n\nConvert a base index, in the defined ordering, to a cpair of constraint type (CE, CI, F) and element index. Only depends on problem dimensions, not on an actual constraint set.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_el_to_bi","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_el_to_bi","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_el_to_bi","text":"cs_cnstr_el_to_bi(cnstr_idxs::MPCCConstraintSet, el::Int64)\n\nConvert element of a constraint set to the base index. This DOES depend on the constraint set.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_bi_to_cnstr_el","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_bi_to_cnstr_el","page":"Functions and structs","title":"MPCCModelManager.cs_bi_to_cnstr_el","text":"cs_bi_to_cnstr_el(cnstr_idxs::MPCCConstraintSet, bi_idx::Int64)\n\nConvert a base index to the constraint set index.  This may return missing since the specified BI might not be in the constraint set (not active).  This DOES depend on the constraint set.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_el_to_cpair","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_el_to_cpair","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_el_to_cpair","text":"cs_cnstr_el_to_cpair(cnstr_idxs::MPCCConstraintSet, el::Int64; b_F_cart=true)\n\nConvert element el of constraint set to the cpair format.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cpair_to_cnstr_el","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cpair_to_cnstr_el","page":"Functions and structs","title":"MPCCModelManager.cs_cpair_to_cnstr_el","text":"cs_cpair_to_cnstr_el(cnstr_idxs::MPCCConstraintSet, ctype::MPCCActivesetCnstrType, el::MPCCIdxElement)\n\nConvert cpair element of a constraint set to its element in the constraint set (at which place is it in the bi index)\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_idxs_add_by_bi!","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_idxs_add_by_bi!","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_idxs_add_by_bi!","text":"cs_cnstr_idxs_add_by_bi!(cnstr_idxs::MPCCConstraintSet, bi_idx::Int64)\n\nAdd element into constraint set by its base index.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_idxs_add_by_cpair!","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_idxs_add_by_cpair!","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_idxs_add_by_cpair!","text":"cs_cnstr_idxs_add_by_cpair!(cnstr_idxs::MPCCConstraintSet, ctype::MPCCActivesetCnstrType, el::MPCCIdxElement)\n\nAdd element into the constraint set by its cpair.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_idxs_del_by_cnstr_el!","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_idxs_del_by_cnstr_el!","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_idxs_del_by_cnstr_el!","text":"cs_cnstr_idxs_del_by_cnstr_el!(cnstr_idxs::MPCCConstraintSet, el::Int64)\n\nDelete element of constraint set by its element number.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_idxs_del_by_bi!","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_idxs_del_by_bi!","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_idxs_del_by_bi!","text":"cs_cnstr_idxs_del_by_bi!(cnstr_idxs::MPCCConstraintSet, bi_idx::Int64)\n\nDelete element of a constraint set by its base index.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_idxs_del_by_cpair!","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_idxs_del_by_cpair!","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_idxs_del_by_cpair!","text":"cs_cnstr_idxs_del_by_cpair!(cnstr_idxs::MPCCConstraintSet, ctype::MPCCActivesetCnstrType, el::MPCCIdxElement)\n\nDelete constraint set element by its cpair.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_get_as_bitmask","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_get_as_bitmask","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_get_as_bitmask","text":"cs_cnstr_get_as_bitmask(cnstr_idxs::MPCCConstraintSet)\n\nGet the constraint set expressed as three bitmasks: BitVector for CE and CI; BitMatrix for F. Returned as NamedTuple.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_build_from_bitmask","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_build_from_bitmask","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_build_from_bitmask","text":"cs_cnstr_build_from_bitmask(dimspec::MPCCDimSpec, ce_actv::BitVector, ci_actv::BitVector, F_actv::BitMatrix)\n\nBuild whole constraint set from bitmasks of the contraints for each type.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_build_all_active","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_build_all_active","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_build_all_active","text":"cs_cnstr_build_all_active(dimspec::MPCCDimSpec)\n\nBuild a constraint set with all constraints included (active).\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_get_Fq_count","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_get_Fq_count","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_get_Fq_count","text":"cs_cnstr_get_Fq_count(cnstr_idxs::MPCCConstraintSet)\n\nReturn the number of active constraints in each column q of the F constraints.\n\n\n\n\n\n","category":"function"},{"location":"manual/function_list/","page":"Functions and structs","title":"Functions and structs","text":"MPCCModelManager.cs_cnstr_get_all_active_bi","category":"page"},{"location":"manual/function_list/#MPCCModelManager.cs_cnstr_get_all_active_bi","page":"Functions and structs","title":"MPCCModelManager.cs_cnstr_get_all_active_bi","text":"cs_cnstr_get_all_active_bi(cnstr_idxs::MPCCConstraintSet)\n\nReturns BI entries for all contraints in cnstr_idxs, separated into type in a named tuple.\n\n\n\n\n\n","category":"function"},{"location":"#MPCCModelManager.jl","page":"Home","title":"MPCCModelManager.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"!!! DEVELOPMENT VERSION – There will be breaking changes to come.","category":"page"},{"location":"","page":"Home","title":"Home","text":"MPCCModelManager.jl is a package for managing parametric MPCC or NLP models of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginequation\nbeginaligned\nmin_x(p(t)) quad  f(p(t) x(p(t))) \ntextrmsubject to quad  c_mathcalEi(p(t) x(p(t))) = 0 quad i = 1 dots m_mathcalE\n c_mathcalIi(p(t) x(p(t))) ge 0 quad i = 1 dots m_mathcalI \n F_ij(p(t) x(p(t))) ge 0 quad i = 1 dots l  j = 1 dots q \n prod_i=1^l F_ij = 0 quad j = 1 dots q\nendaligned\nendequation","category":"page"},{"location":"","page":"Home","title":"Home","text":"The idea is that one can supply a model definition in various formats such as a native Julia definition, JSON, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The library will then generate Julia native functions that will calculate the Jacobians, Hessians, and parameteric derivatives thereof. There is choice in how the derivatives are computed, e.g. dense matrix outputs via automatic differentiation (ForwardDiff.jl for now), sparse symbolic differentiation, etc.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is not registered yet, so this must be done manually at the moment.","category":"page"},{"location":"#Basic-Usage-Description","page":"Home","title":"Basic Usage Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each model has a dimension specification MPCCDimSpec, which details:","category":"page"},{"location":"","page":"Home","title":"Home","text":"n: The number of spatial coordinates.\nl: The number of expressions in each complementarity constraint.\nq: The numebr of complementarity constraints.\nme: The number of equality constraints.\nmi: The number of inequality constraints.\nr: The number of continuous parameters, which are assumed implicitly dependent on some real scalar, say \"t\".\ns: The number of integer parameters, not used yet.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are some sample models under ./src/model_samples. In the future, this will be in a different package and there'll be functionality to import from JSON, etc. For the moment, when defining you own models, just follow the same pattern.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiate the model configuration, e.g. using the model kj3:","category":"page"},{"location":"","page":"Home","title":"Home","text":"model_cfg = model_pmpcc_kj3_build();","category":"page"},{"location":"","page":"Home","title":"Home","text":"This struct contains, amongst other things, the following fields:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dimspec: Dimensions of the model.\nx: Symbolics Num variables vector for x (spatial).\npr: Symbolics Num variables vector for parametric variables (actually functions dependant on some supplied \"t\".\nps: Symbolics Num variables vector for parametric integer variables (not really used).\ndefn: Symbolic expressions for the model including f, ce, ci, F.\nfns: Julia native compiled functions mapping directly to defn.\nknownsols: For test problems, there may be a closed expression for the parametric solution.\nparameterisations: Defines the functional relationship of pr to some real scalar (this is important when r > 1).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, from the model config, we'd like to instantiate the functions that will actually do the work for us. In the future, there will be a choice here, e.g. there'll be the option of symbolic differentiation producing sparse output.  For now though, it's only automatic differentiation implemented against ForwardDiff.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"model_fd = mpccmodel_setup_forwarddiff_dense(model_cfg);","category":"page"},{"location":"","page":"Home","title":"Home","text":"This returns a struct which includes the model configuration, and also the following functions (standard and mutating).","category":"page"},{"location":"","page":"Home","title":"Home","text":"f, f!: Objective function (scalar, I think).\nce, ce!: Equality constraints (vector).\nci, ci!: Inqquality constraints (vector).\nF, F!: Comlementarity constraints (matrix).\nFq, Fq!: Product of complementarity contraints (vector), for penalty method.\ngradf, gradf!: Row vector gradient of f (vector).\njacce, jacce!: Jacobian of ce, (me by n matrix).\njacci, jacci!: Jacobian of ci, (mi by n matrix).\ngradF, gradF!:  Gradients of F, (l by q matrix of length n vectors).\ngradFq, gradFq!: \nhessf, hessf!: Hessian of f.\nhessce, hessce!: Hessians of ce (length me vector of n by n matrices)\nhessci, hessci!: Hessians of ci (length mi vector of n by n matrices)\nhessF, hessF!: Hessians of F (l by q matrix of n by n matrices)\nhessFq, hessFq!: \nfdp, fdp!: Gradient of f wrt pr (vector of length r)\ncedp, cedp!: Gradient of ce wrt pr (vector of length r of vector of length me)\ncidp, cidp!: Gradient of ci wrt pr (vector of length r of vector of length mi)\nFdp, Fdp!: Gradient of F wrt pr (vector of length r of matrix of size l by q)\ngradfdp, gradfdp!: Gradient wrt pr of gradient wrt x (vector of length r of vector of length n)\njaccedp, jaccedp!: Gradient wrt pr of Jacobian of ce (vector of length r of matrix of size me by n)\njaccidp, jaccidp!: Gradient wrt pr of Jacobian of ci (vector of length r of matrix of size mi by n)\ngradFdp, gradFdp!: Gradient wrt pr of spatial gradients of F (vector of length r or matrix of size l by q of vector of length n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each of the functions accepts a primal position x, continuous parameters pr (p in the model), and discrete parameters ps.","category":"page"}]
}
